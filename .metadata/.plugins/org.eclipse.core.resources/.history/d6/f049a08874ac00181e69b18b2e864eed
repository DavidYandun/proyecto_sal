package salycanela.model.manager;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import salycanela.model.entities.TabCpFacturasProveedore;
import salycanela.model.entities.TabCpDetalleFacturasProveed;
import salycanela.model.entities.TabCpModosPago;
import salycanela.model.entities.TabCpProveedore;
import salycanela.model.entities.TabVtsDetallePedido;
import salycanela.model.entities.TabVtsPedido;

@Stateless
@LocalBean
public class ManagerFacturasProveedor {

	@PersistenceContext(unitName = "restaurante_salycanelaDS")
	private EntityManager em;

	public ManagerFacturasProveedor() {
		// TODO Auto-generated constructor stub
	}

	public TabCpFacturasProveedore crearFacturaTmp(String cpidfacturaprov, String cpidproveedor, Integer cpidmodopago,
			Date cpfechaemisionfacturaprov, Date cpfechacaducidadfacprov, String cpobservacionesfacturaprov) {
		TabCpFacturasProveedore facturaTmp = new TabCpFacturasProveedore();

		TabCpProveedore proveedor = em.find(TabCpProveedore.class, cpidproveedor);
		TabCpModosPago pago = em.find(TabCpModosPago.class, cpidmodopago);
		facturaTmp.setCpidfacturaprov(cpidfacturaprov);
		facturaTmp.setTabCpProveedore(proveedor);
		facturaTmp.setTabCpModosPago(pago);
		facturaTmp.setCpfechaemisionfacturaprov(cpfechaemisionfacturaprov);
		facturaTmp.setCpfechacaducidadfacprov(cpfechacaducidadfacprov);
		facturaTmp.setCpobservacionesfacturaprov(cpobservacionesfacturaprov);
		facturaTmp.setCpestadofacturaprov(true);
		facturaTmp.setTabCpDetalleFacturasProveeds(new ArrayList<TabCpDetalleFacturasProveed>());

		return facturaTmp;
	}

	public void agregarDetalleFacturaTmp(TabCpFacturasProveedore facturaTmp, Integer invidprod,
			Integer cpcantidaddetallefacprov, BigDecimal cpunitariodetallefacprov, BigDecimal cpdescuentodetallefacprov,
			BigDecimal cpivadetallefacprov, BigDecimal cptotaldetallefacprov) throws Exception {
		double valorTotal = 0;
		double totalIva=0;
		double precio = 0;
		// sentencias de error de ingreso
		if (facturaTmp == null)
			throw new Exception("Error primero debe crear una nueva Factura.");
		if (invidprod == null || invidprod.intValue() < 0)
			throw new Exception("Error debe especificar el codigo del producto.");
		if (cpcantidaddetallefacprov == null || cpcantidaddetallefacprov.intValue() <= 0)
			throw new Exception("Error debe especificar la cantidad del producto.");

		// buscamos el plato:
		TabVtsPlato p = em.find(TabVtsPlato.class, idplato);
		// creamos un nuevo detalle y llenamos sus propiedades:
		TabVtsDetallePedido d = new TabVtsDetallePedido();
		d.setIddp(iddetalleTempo);
		d.setTabVtsPedido(pedidoTmp);
		d.setTabVtsPlato(p);
		d.setCantidaddp(cantidad);
		d.setSegundo(segundo);
		d.setLlevar(llevar);
		d.setTarjeta(tarjeta);

		if (!tarjeta) {
			if (segundo) {
				precio = p.getPrecioespecialplato().doubleValue();
			} else {
				precio = p.getPrecioplato().doubleValue();
			}
			if (llevar)
				precio = precio + 0.25;
		}

		valorTotal = cantidad * precio;
		d.setValorunitariodp(new BigDecimal(precio));
		d.setValortotaldp(new BigDecimal(valorTotal));

		pedidoTmp.getTabVtsDetallePedidos().add(d);
		// verificamos los campos calculados:

		calcularPedidoTmp(pedidoTmp);
		iddetalleTempo++;
		// throw new Exception("ID: " + iddetalleTempo);
	}

	private void calcularFacturaTmp(TabCpFacturasProveedore facturaTmp) {
		double sumaTotales = 0;
		for (TabVtsDetallePedido det : pedidoTmp.getTabVtsDetallePedidos()) {
			sumaTotales += det.getCantidaddp().doubleValue() * det.getValorunitariodp().doubleValue();
		}

		pedidoTmp.setValorpedido(new BigDecimal(sumaTotales));
	}

}
